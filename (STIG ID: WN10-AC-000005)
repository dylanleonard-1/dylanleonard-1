# SecEdit Command Overview and Usage Guide

## **Introduction**
The **`secedit`** command is a powerful Windows tool for configuring security settings stored in a database. This guide explains its syntax, parameters, and practical use cases, including examples for common scenarios like applying security templates, resetting the security database, and troubleshooting.

This guide also provides a step-by-step walkthrough to configure and verify the **Account Lockout Duration** policy on Windows 10 to meet **STIG ID: WN10-AC-000005** requirements. The policy ensures that accounts are locked for at least 15 minutes after a certain number of failed login attempts.

---

## **Syntax**
```plaintext
secedit /configure /db filename [/cfg filename] [/overwrite] [/areas area1 area2...] [/log filename] [/quiet]
```

---

## **Parameters**

### **1. `/db filename`**
Specifies the database used to perform the security configuration.
- Example: `secedit.sdb`

### **2. `/cfg filename`**
Specifies a security template to import into the database prior to configuring the system.
- Security templates can be created using the **Security Templates snap-in**.

### **3. `/overwrite`**
Clears the database before importing the template. Without this parameter:
- Settings in the template are **merged** into the database.
- If there are conflicts, **template settings take precedence**.

### **4. `/areas area1 area2...`**
Specifies the security areas to apply. If omitted, all areas in the database are applied.
- Supported areas:
  - **SECURITYPOLICY**: Account Policies, Audit Policies, Event Log Settings, Security Options.
  - **GROUP_MGMT**: Restricted Groups.
  - **USER_RIGHTS**: User Rights Assignment.
  - **REGKEYS**: Registry Permissions.
  - **FILESTORE**: File System Permissions.
  - **SERVICES**: System Service Settings.

### **5. `/log filename`**
Specifies a file to log the status of the configuration process. If omitted:
- Logs are written to `scesrv.log` in `%windir%\security\logs`.

### **6. `/quiet`**
Suppresses user prompts during configuration.

---

## **Examples**

### **1. Apply a Security Template**
Apply a security template to configure Account Policies:
```plaintext
secedit /configure /db secedit.sdb /cfg custom.inf /overwrite /areas SECURITYPOLICY /log secedit.log /quiet
```

### **2. Reset the Security Database**
Reset the security database to default settings:
```plaintext
secedit /configure /db secedit.sdb /cfg defltbase.inf /areas SECURITYPOLICY /log reset.log /quiet
```

### **3. Apply Multiple Areas**
Apply settings for `SECURITYPOLICY` and `USER_RIGHTS`:
```plaintext
secedit /configure /db secedit.sdb /cfg custom.inf /areas SECURITYPOLICY USER_RIGHTS /log multiarea.log /quiet
```

### **4. Export Current Configuration**
Export current security database settings to a file:
```plaintext
secedit /export /cfg export.inf /areas SECURITYPOLICY
```

---

## **Step-by-Step Guide to Configure Account Lockout Policy**

### **Step 1: Ensure Script Runs with Administrator Privileges**
Before running any script, verify that it is executed with elevated permissions (Administrator mode). Scripts that modify security settings require elevated privileges.

### **Step 2: Reset the Security Database**
Resetting the security database ensures that existing configurations or corruption do not interfere with policy application.

#### **Command**
```powershell
Rename-Item -Path "$env:windir\security\Database\secedit.sdb" -NewName "secedit.sdb.bak" -Force -ErrorAction SilentlyContinue
secedit /configure /db "$env:windir\security\Database\secedit.sdb" /cfg "$env:windir\inf\defltbase.inf" /areas SECURITYPOLICY
```

### **Step 3: Create and Apply the Security Template**
A security template specifies the desired policy settings, such as `LockoutDuration`.

#### **Template Creation Script**
```powershell
$tempTemplatePath = "$env:TEMP\SecurityTemplate.inf"
$lockoutDuration = 15

@"
[System Access]
LockoutDuration = $lockoutDuration
"@ | Out-File -FilePath $tempTemplatePath -Encoding ASCII
```

#### **Apply the Template**
```powershell
secedit /configure /db "$env:TEMP\SecurityDatabase.sdb" /cfg $tempTemplatePath /areas SECURITYPOLICY
```

### **Step 4: Force Group Policy Update**
Ensure that all changes are applied immediately.

#### **Command**
```powershell
gpupdate /force
```

### **Step 5: Verify the Configuration**
Check that the `LockoutDuration` is correctly configured by exporting the current settings.

#### **Verification Script**
```powershell
$tempExportPath = "$env:TEMP\SecurityExport.inf"

secedit /export /cfg $tempExportPath /areas SECURITYPOLICY
$exportedConfig = Get-Content -Path $tempExportPath

# Check if LockoutDuration exists
if ($exportedConfig -match "LockoutDuration\s*=\s*([0-9]+)") {
    $currentValue = $matches[1]
    if ($currentValue -ge $lockoutDuration) {
        Write-Output "Verification successful: Lockout duration is set to $currentValue minute(s)."
    } else {
        Write-Warning "Verification failed: Lockout duration is $currentValue minute(s), which is less than $lockoutDuration."
    }
} else {
    Write-Warning "Verification failed: Lockout duration setting not found in the exported configuration."
}
```

### **Step 6: Handle Group Policy Overrides**
If the `LockoutDuration` setting does not appear or changes are not applied, check for Group Policy overrides.

#### **Check Applied Policies**
```powershell
gpresult /h "$env:TEMP\gpresult.html"
Start-Process "$env:TEMP\gpresult.html"
```

#### **Verify in GPMC**
1. Open **Group Policy Management Console** (`gpmc.msc`).
2. Navigate to the applied GPO.
3. Verify that the `Account Lockout Duration` is set to 15 minutes or greater.

### **Step 7: Log All Steps**
Maintain detailed logs for troubleshooting. The log file can be created as follows:

#### **Log File Initialization**
```powershell
$logFilePath = "$env:TEMP\AccountLockoutPolicy.log"
Write-Output "Log initialized." | Out-File -FilePath $logFilePath
```

#### **Add Entries to Log**
```powershell
Write-Output "Step description..." | Tee-Object -FilePath $logFilePath -Append
```

### **Step 8: Unified Script**
Combine all the above steps into a single PowerShell script:

```powershell
<#
.SYNOPSIS
Configure Windows 10 account lockout duration to 15 minutes or greater (STIG ID: WN10-AC-000005).

.DESCRIPTION
This script ensures compliance with STIG requirements by:
1. Taking ownership of necessary directories and files.
2. Overriding permissions to apply the policy.
3. Verifying that the account lockout duration is correctly configured.

.NOTES
Author: [Your Name]
Date: [Insert Date]
STIG ID: WN10-AC-000005
#>

# Ensure script runs as Administrator
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Error "This script must be run as Administrator. Please restart PowerShell as Administrator and try again."
    exit 1
}

# Reset Security Database
Write-Output "Resetting the security database..."
Rename-Item -Path "$env:windir\security\Database\secedit.sdb" -NewName "secedit.sdb.bak" -Force -ErrorAction SilentlyContinue
secedit /configure /db "$env:windir\security\Database\secedit.sdb" /cfg "$env:windir\inf\defltbase.inf" /areas SECURITYPOLICY

# Apply Account Lockout Policy
$tempTemplatePath = "$env:TEMP\SecurityTemplate.inf"
$lockoutDuration = 15
@"
[System Access]
LockoutDuration = $lockoutDuration
"@ | Out-File -FilePath $tempTemplatePath -Encoding ASCII

secedit /configure /db "$env:TEMP\SecurityDatabase.sdb" /cfg $tempTemplatePath /areas SECURITYPOLICY

# Force Group Policy Update
gpupdate /force

# Verify Configuration
$tempExportPath = "$env:TEMP\SecurityExport.inf"
secedit /export /cfg $tempExportPath /areas SECURITYPOLICY
$exportedConfig = Get-Content -Path $tempExportPath

if ($exportedConfig -match "LockoutDuration\s*=\s*([0-9]+)") {
    $currentValue = $matches[1]
    if ($currentValue -ge $lockoutDuration) {
        Write-Output "Verification successful: Lockout duration is set to $currentValue minute(s)."
    } else {
        Write-Warning "Verification failed: Lockout duration is $currentValue minute(s), which is less than $lockoutDuration."
    }
} else {
    Write-Warning "Verification failed: Lockout duration setting not found in the exported configuration."
}
```

---

## **Troubleshooting Tips**
- Check `%windir%\security\logs\scesrv.log` for errors.
- Ensure no Group Policy Object (GPO) overrides local settings.
- Use `gpmc.msc` or `gpresult` to analyze active policies.

---

## **Resources**
- **Microsoft Docs**: [Local Group Policy Editor](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/)
- **STIG Viewer**: Use to validate settings against DISA STIG benchmarks.

